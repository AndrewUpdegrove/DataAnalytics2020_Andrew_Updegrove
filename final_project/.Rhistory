country_codes <- read.csv("data/country_codes.csv", header = T, sep = ",")
# Namibia's country code is NA which results in missing value
country_codes[which(country_codes$Name == "Namibia"),2] <- "NB"
View(country_codes)
# removing metadata from and cleaning primary_forest
names(primary_forest)[1] <- "Country" # changing column name to consistent value for later
primary_forest <- filter(primary_forest, Value.Footnotes != 'A') # getting rid of regional data
primary_forest$Element <- NULL # forest is measured in area
primary_forest$Unit <- NULL # units are in 1000's of hectacres
primary_forest$Value.Footnotes <- NULL # footnotes are all manual estimation, expert sources, or official reporting
primary_forest$Code <- NA
for(sub in unique(primary_forest$Country)){
index <- which(country_codes$Name == sub)
if(length(index) == 0){
print(paste("No matching country found for", sub))
new_code <- readline(prompt = "What 2 letter code would you like to use?")
} else if(length(index) == 1){
new_code = country_codes[index,2]
} else {
print("More than one match found???")
print(paste("Your choices are"), sub)
new_code <- readline(prompt = "What 2 letter code would you like to use?")
}
primary_forest[which(primary_forest$Country == sub),]$Code <- new_code
}
primary_forest <- primary_forest[which(primary_forest$Code != "IGN"),]
primary_forest$Country <- NULL
names(primary_forest)[2] <- "primary_forest"
# removing metadata from and cleaning planted_forest
names(planted_forest)[1] <- "Country"
planted_forest <- filter(planted_forest, Value.Footnotes != 'A')
planted_forest$Element <- NULL # forest is measured in area
planted_forest$Unit <- NULL # units are in 1000's of hectacres
planted_forest$Value.Footnotes <- NULL # footnotes are all manual estimation, expert sources, or official reporting
planted_forest$Code <- NA
for(sub in unique(planted_forest$Country)){
index <- which(country_codes$Name == sub)
if(length(index) == 0){
print(paste("No matching country found for", sub))
new_code <- readline(prompt = "What 2 letter code would you like to use?")
} else if(length(index) == 1){
new_code = country_codes[index,2]
} else {
print("More than one match found???")
print(paste("Your choices are"), sub)
new_code <- readline(prompt = "What 2 letter code would you like to use?")
}
planted_forest[which(planted_forest$Country == sub),]$Code <- new_code
}
planted_forest <- planted_forest[which(planted_forest$Code != "IGN"),]
planted_forest$Country <- NULL
names(planted_forest)[2] <- "planted_forest"
# removing metadata from and cleaning palm_oil
palm_oil[,c(-2, -8, -10,-30, -32, -35)] <- NULL
names(palm_oil)[3] <- c("Country")
palm_oil$Code <- NA
for(sub in unique(palm_oil$Country)){
index <- which(country_codes$Name == sub)
if(length(index) == 0){
print(paste("No matching country found for", sub))
new_code <- readline(prompt = "What 2 letter code would you like to use?")
} else if(length(index) == 1){
new_code = country_codes[index,2]
} else {
print("More than one match found???")
print(paste("Your choices are"), sub)
new_code <- readline(prompt = "What 2 letter code would you like to use?")
}
palm_oil[which(palm_oil$Country == sub),]$Code <- new_code
}
palm_oil <- palm_oil[which(palm_oil$Code != "IGN"),]
palm_oil$Country <- NULL #drop the country
palm_oil$Flag <- NULL
# removing metadata from and cleaning GDP
names(GDP)[1] <- "Country"
GDP$Code <- NA
for(sub in unique(GDP$Country)){
index <- which(country_codes$Name == sub)
if(length(index) == 0){
print(paste("No matching country found for", sub))
new_code <- readline(prompt = "What 2 letter code would you like to use?")
} else if(length(index) == 1){
new_code = country_codes[index,2]
} else {
print("More than one match found???")
print(paste("Your choices are"), sub)
new_code <- readline(prompt = "What 2 letter code would you like to use?")
}
GDP[which(GDP$Country == sub),]$Code <- new_code
}
GDP <- GDP[which(GDP$Code != "IGN"),]
GDP$Country <- NULL
GDP$Value.Footnotes <- NULL
names(GDP)[2] <- "GDP"
# need to outer join data by country and year
combined1 <- merge(planted_forest, primary_forest, by = c("Code", "Year"), all = TRUE)
combined2 <- merge(GDP, palm_oil, by = c("Code", "Year"))
combined2$palm_oil_normalized <- combined2$Trade.Value..US.. / combined2$GDP
combined2$Year <- as.integer(combined2$Year)
final <- merge(combined1, combined2, by = c("Code", "Year"), all = TRUE)
regression_collection <- c()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 0){
model = lm(palm_oil_normalized ~ Year, data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
View(regression_collection)
View(regression_collection)
ggplot(data = regression_collection, aes(x = (Intercept), y = Year)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
regression_collection <- data.frame()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 0){
model = lm(palm_oil_normalized ~ Year, data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
ggplot(data = regression_collection, aes(x = (Intercept), y = Year)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
ggplot(data = regression_collection, aes(x = "(Intercept)", y = Year)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
View(regression_collection)
names(regression_collection) <- c("Code", "intercept", "slope")
ggplot(data = regression_collection, aes(x = intercept, y = slope)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
View(regression_collection)
regression_collection[,2:3] <- as.numeric(regression_collection[,2:3])
View(regression_collection)
regression_collection[1,2]
typeof(regression_collection[1,2])
as.numeric(regression_collection[1,2])
regression_collection$intercept <- as.numeric(regression_collection$intercept)
regression_collection$slope <- as.numeric(regression_collection$slope)
ggplot(data = regression_collection, aes(x = intercept, y = slope)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
save.image("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
load("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
filter(regression_collection) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
require(dplyr)
require(ggplot2)
require(broom)
filter(regression_collection) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
is.na(regression_collection)
filter(regression_collection, !is.na(slope)) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
filter(regression_collection, !is.na(slope)) %>% ggplot(aes(x = intercept, y = slope)) + geom_point()
filter(regression_collection, !is.na(slope))
filter(regression_collection, !is.na(slope)) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_y_continuous(trans = "log10")
filter(regression_collection, !is.na(slope)) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_y_continuous(trans = "log10") +
scale_x_continuous(trans = "log10")
filter(regression_collection, !is.na(slope)) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_y_log10() + scale_x_log10()
range(regression_collection$intercept)
range(regression_collection$slope)
regression_collection$slope
range(filter(regression_collection, !is.na(slope)))
range(filter(regression_collection, !is.na(slope)) %>% select(slope))
regression_collection[4,3[]]
regression_collection[4,3
]
regression_collection[2,3]
regression_collection[3,3]
regression_collection[6,3]
log10(regression_collection[6,3])
log10(10)
log10(.00005)
filter(regression_collection, !is.na(slope) & slope > 0) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_y_log10() + scale_x_log10()
filter(regression_collection, !is.na(slope) & slope > 0 & intercept > 0) %>% ggplot(aes(x = intercept, y = slope)) + geom_point() +
scale_y_log10() + scale_x_log10()
filter(regression_collection, !is.na(slope) & slope > 0 & intercept > 0)
View(regression_collection)
filter(regression_collection) %>% ggplot(aes(x = intercept, y = slope)) + geom_point()
regression_collection <- data.frame()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 0){
model = lm(Trade.Value..US.. ~ Year, data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
names(regression_collection) <- c("Code", "intercept", "slope")
regression_collection$intercept <- as.numeric(regression_collection$intercept)
regression_collection$slope <- as.numeric(regression_collection$slope)
filter(regression_collection) %>% ggplot(aes(x = intercept, y = slope)) + geom_point()
which.min(regression_collection$intercept)
regression_collectionh[which.min(regression_collection$intercept)]
regression_collection[which.min(regression_collection$intercept)]
regression_collection[which.min(regression_collection$intercept),]
range(regression_collection$intercept)
range(filter(regression_collection$slope, !is.na(slope)))
range(filter(regression_collection, !is.na(slope)))
range(filter(regression_collection, !is.na(slope)) %>% select(slope))
View(regression_collection)
test = lm(Trade.Value..US.. )
test = lm(Trade.Value..US.. ~ poly(Year, 2), data = dat)
test
test = lm(palm_oil_nomralized ~ poly(Year, 2), data = dat)
test = lm(palm_oil_normalized ~ poly(Year, 2), data = dat)
test
regression_collection <- data.frame()
# linear version won't work because it always results in a line
regression_collection <- data.frame()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 0){
model = lm(palm_oil_normalized ~ poly(Year, 2), data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 1){
model = lm(palm_oil_normalized ~ poly(Year, 2), data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
# linear version won't work because it always results in a line
regression_collection <- data.frame()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 2){
model = lm(palm_oil_normalized ~ poly(Year, 2), data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
names(regression_collection) <- c("Code", "intercept", "slope", "curvature")
regression_collection$intercept <- as.numeric(regression_collection$intercept)
regression_collection$slope <- as.numeric(regression_collection$slope)
regression_collection$curvature <- as.numeric(regression_collection$curvature)
View(regression_collection)
(
)
ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
ggplot(data = regression_collection, aes(x = intercept, y = slope)) + geom_point()
# linear version won't work because it always results in a line
regression_collection <- data.frame()
for(country in unique(combined2$Code)){
dat <- filter(combined2, Trade.Flow == "Export" & Code == country)
if(nrow(dat) > 2){
model = lm(Trade.Value..US.. ~ poly(Year, 2), data = dat)
regression_collection <- rbind(regression_collection, c(country, model$coefficients))
}
}
names(regression_collection) <- c("Code", "intercept", "slope", "curvature")
regression_collection$intercept <- as.numeric(regression_collection$intercept)
regression_collection$slope <- as.numeric(regression_collection$slope)
regression_collection$curvature <- as.numeric(regression_collection$curvature)
ggplot(data = regression_collection, aes(x = intercept, y = slope)) + geom_point()
ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 100000) %>% ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 100000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
View(regression_collection)
filter(regression_collection, slope < 10000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 1000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 10000 & slope > -10000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 10000 ) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 10000 & slope > -10000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
filter(regression_collection, slope < 10000 ) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
ggplot(data = regression_collection, aes(x = slope, y = curvature)) + geom_point()
sum_shit <- regression_collection
range(sum_shit$curvature)
# ruining things
for(i in 1:nrow(sum_shit)){
if(sum_shit[i,2] < 0){
sum_shit[i,2] <- -1 * (1/sum_shit[i,2])
}
if(sum_shit[i,3] < 0){
sum_shit[i,3] <- -1 * (1/sum_shit[i,3])
}
}
ggplot(data = sum_shit, aes(x=slope, y = curvature)) + geom_point() + scale_x_log10() + scale_y_log10()
View(sum_shit)
regression_collection[5,3]
sum_shit <- regression_collection
sum_shit <- regression_collection
# ruining things
for(i in 1:nrow(sum_shit)){
if(sum_shit[i,3] < 0){
sum_shit[i,3] <- -1 * (1/sum_shit[i,3])
}
if(sum_shit[i,4] < 0){
sum_shit[i,4] <- -1 * (1/sum_shit[i,4])
}
}
ggplot(data = sum_shit, aes(x=slope, y = curvature)) + geom_point() + scale_x_log10() + scale_y_log10()
log10(sum_shit[1,3:4])
log10(10000)
log10(1000)
log10(100)
log10(10)
log10(1)
transformed <- regression_collection
# ruining things
for(i in 1:nrow(transformed)){
if(transformed[i,3] < 0){
transformed[i,3] <- -1 * (1/transformed[i,3])
}
if(transformed[i,4] < 0){
transformed[i,4] <- -1 * (1/transformed[i,4])
}
transformed[i,3:4] <- log10(transformed[i,3:4])
}
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point()
kmeans(transfored[,3:4], 4, iter.max = 15, algorithm = "Lloyd")
kmeans(transformed[,3:4], 4, iter.max = 15, algorithm = "Lloyd")
clustering <- kmeans(transformed[,3:4], 4, iter.max = 15, algorithm = "Lloyd")
clustering$cluster
clustering$centers
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point() + geom_point(data = clustering$centers, aes(x=slope, y=curvature), shape = 3)
typeof(clustering$centers)
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point() + geom_point(data = as.data.frame(clustering$centers), aes(x=slope, y=curvature), shape = 3)
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point() + geom_point(data = as.data.frame(clustering$centers), aes(x=slope, y=curvature, color = "red"), shape = 3)
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point() + geom_point(data = as.data.frame(clustering$centers), aes(x=slope, y=curvature), color = "red", shape = 3)
ggplot(data = transformed, aes(x=slope, y = curvature)) + geom_point(color = clustering$cluster) + geom_point(data = as.data.frame(clustering$centers), aes(x=slope, y=curvature), color = "red", shape = 3)
transformed[which(clustering$cluster == 1),]
transformed[which(clustering$cluster == 2),]
transformed[which(clustering$cluster == 3),]
transformed[which(clustering$cluster == 4),]
transformed[which(clustering$cluster == 1),]
transformed[which(clustering$cluster == 2),]
filter(combined2, Trade.Flow == "Export" & Code == "ZM") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "US") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "ZW") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "VN") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "VU") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "RW") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "SA") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
transformed[which(clustering$cluster == 3),]
filter(combined2, Trade.Flow == "Export" & Code == "BS") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "BT") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "BY") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "CG") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "BY") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "GW") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "CN") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "WS") %>% ggplot(aes(x = Year, y = palm_oil_normalized)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "WS") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "CN") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(combined2, Trade.Flow == "Export" & Code == "CD") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
View(combined2)
save.image("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
load("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
# ------------------------------------------------------------------------------
# Random Forest but with planted forest
# ------------------------------------------------------------------------------
# get the trends on whether the primary forest are shrinking in a country
planted_regression <- data.frame()
for(country in unique(planted_forest$Code)){
dat <- filter(planted_forest, Code == country)
if(nrow(dat) > 1){
model = lm(planted ~ Year, data = dat)
primary_regression <- rbind(primary_regression, c(country, model$coefficients))
}
}
View(planted_forest)
View(planted_regression)
require(dplyr)
require(ggplot2)
require(broom)
require(tidyr)
require(randomForest)
# ------------------------------------------------------------------------------
# Random Forest but with planted forest
# ------------------------------------------------------------------------------
# get the trends on whether the primary forest are shrinking in a country
planted_regression <- data.frame()
for(country in unique(planted_forest$Code)){
dat <- filter(planted_forest, Code == country)
if(nrow(dat) > 1){
model = lm(planted ~ Year, data = dat)
primary_regression <- rbind(primary_regression, c(country, model$coefficients))
}
}
planted_regression$X.0. <- as.numeric(planted_regression$X.0.)
planted_regression$X.0..1 <- as.numeric(planted_regression$X.0..1)
# ------------------------------------------------------------------------------
# Random Forest but with planted forest
# ------------------------------------------------------------------------------
# get the trends on whether the primary forest are shrinking in a country
planted_regression <- data.frame()
for(country in unique(planted_forest$Code)){
dat <- filter(planted_forest, Code == country)
if(nrow(dat) > 1){
model = lm(planted ~ Year, data = dat)
primary_regression <- rbind(primary_regression, c(country, model$coefficients))
}
}
# get the trends on whether the primary forest are shrinking in a country
primary_regression <- data.frame()
for(country in unique(primary_forest$Code)){
dat <- filter(primary_forest, Code == country)
if(nrow(dat) > 1){
model = lm(primary ~ Year, data = dat)
primary_regression <- rbind(primary_regression, c(country, model$coefficients))
}
}
primary_regression$X.0. <- as.numeric(primary_regression$X.0.)
primary_regression$X.0..1 <- as.numeric(primary_regression$X.0..1)
# ------------------------------------------------------------------------------
# Random Forest but with planted forest
# ------------------------------------------------------------------------------
# get the trends on whether the primary forest are shrinking in a country
planted_regression <- data.frame()
for(country in unique(planted_forest$Code)){
dat <- filter(planted_forest, Code == country)
if(nrow(dat) > 1){
model = lm(planted ~ Year, data = dat)
planted_regression <- rbind(planted_regression, c(country, model$coefficients))
}
}
planted_regression$X.0. <- as.numeric(planted_regression$X.0.)
planted_regression$X.0..1 <- as.numeric(planted_regression$X.0..1)
#  if the slope is significant (no slope gets recorded as -1e_15)
planted_classification <- data.frame()
View(planted_regression)
ggplot(data = planted_regression, mapping = aes(x = X.0., y = X.0..1)) + geom_point()
#  if the slope is significant (no slope gets recorded as -1e_15)
planted_classification <- data.frame()
for(i in 1:nrow(planted_regression)){
if(planted_regression[i,3] < -.00001){
holder = 1
} else {
holder = -1
}
planted_classification <- rbind(planted_classification, c(planted_regression[i,1], holder))
}
View(planted_classification)
names(primary_classification) <- c("Code", "class") # relabel columns
names(planted_classification) <- c("Code", "class") # relabel columns
planted_classification$class <- as.factor(planted_classification$class) # convert classification to a factor
planted.class <- filter(planted_classification, Code %in% short.data$Code) %>% arrange(Code) # use only ones we have data and then put it alphabetical order
# separate into training and testing data
set.seed(1111292020)
# separate into training and testing data
set.seed(1111292020)
rf2.indices <- sample(nrow(short.data), ceiling(.8*nrow(short.data)))
rf2.train.x <- short.data[rf2.indices,-1]
rf2.test.x <- short.data[-rf2.indices,-1]
rf2.train.y <- planted.class[rf2.indices,-1]
rf2.test.y <- planted.class[-rf2.indices, -1]
rf2.model <- randomForest(na.roughfix(rf2.train.x), rf2.train.y) # pass into random forest a repaired matrix
# use entire data set to repair the test set, and then predict on it
rf2.predictions <- predict(rf2.model, na.roughfix(short.data[,-1])[-rf2.indices,])
table(rf2.predictions, rf2.test.y)
rf2.test.y
filter(regression_collection, slope < 10000 & slope > -10000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
filter(palm_oil, Code == "US" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(palm_oil, Code == "US" & Trade.Flow == "Export")
filter(palm_oil, Code == "AU" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
View(palm_oil)
View(country_codes)
filter(palm_oil, Code == "ES" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(palm_oil, Code == "TH" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(palm_oil, Code == "RS" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) + geom_point()
filter(palm_oil, Code == "US" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) +
geom_point() +
labs(xlab = "Year", ylab = "Trade Value in USD", title = "United States Palm Oil Exports")
filter(palm_oil, Code == "US" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) +
geom_point() +
labs(x = "Year", y = "Trade Value in USD", title = "United States Palm Oil Exports")
filter(palm_oil, Code == "RS" & Trade.Flow == "Export") %>% ggplot(aes(x = Year, y = Trade.Value..US..)) +
geom_point() +
labs(x = "Year", y = "Trade Value in USD", title = "Serbia Palm Oil Exports")
filter(palm_oil, Code == "RS" & Trade.Flow == "Export")
filter(palm_oil, Code == "US" & Trade.Flow == "Export")
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% ggplot(aes(x = palm_oil_normalized)) +
geom_histogram()
filter(combined2, Trade.Flow == "Export" & Year == 2016 & palm_oil_normalized < .005) %>% ggplot(aes(x = palm_oil_normalized)) +
geom_histogram()
filter(combined2, Trade.Flow == "Export" & Year == 2016 & palm_oil_normalized < .001) %>% ggplot(aes(x = palm_oil_normalized)) +
geom_histogram()
filter(combined2, Trade.Flow == "Export" & Year == 2016 & palm_oil_normalized > 0) %>% ggplot(aes(x = palm_oil_normalized)) +
geom_histogram()
View(combined2)
filter(regression_collection, slope < 10000 & slope > -10000) %>% ggplot(aes(x = slope, y = curvature)) + geom_point()
save.image("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
load("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..) %>% log10()
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..)
require(dplyr)
require(ggplot2)
require(broom)
require(tidyr)
require(randomForest)
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..) %>% log10()
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..) %>% log10() %>% ggplot(aes(x = Trade.Vlaue..US..)) +
geom_histogram()
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..) %>% log10() %>% ggplot(aes(x = Trade.Value..US..)) +
geom_histogram()
filter(combined2, Trade.Flow == "Export" & Year == 2016) %>% select(Trade.Value..US..) %>% ggplot(aes(x = Trade.Value..US..)) +
geom_histogram() +
scale_x_log10() +
labs(x = "Logarthmic Export Value in USD", y = "Frequency", title = "World Palm Oil Exports by country in 2016")
save.image("D:/Documents/College/5th_year/Fall/data_analytics/final_project/manually_cleaned.RData")
